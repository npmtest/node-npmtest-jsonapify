{"/home/travis/build/npmtest/node-npmtest-jsonapify/test.js":"/* istanbul instrument in package npmtest_jsonapify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsonapify/lib.npmtest_jsonapify.js":"/* istanbul instrument in package npmtest_jsonapify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsonapify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsonapify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsonapify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsonapify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsonapify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsonapify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsonapify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jsonapify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsonapify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jsonapify.__dirname + '/lib.npmtest_jsonapify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/index.js":"var _ = require('lodash');\n\nmodule.exports = exports = {\n\tLink: require('./Link'),\n\tField: require('./Field'),\n\tRuntime: require('./Runtime'),\n\tRegistry: require('./Registry'),\n\tAccessor: require('./Accessor'),\n\tResponse: require('./Response'),\n\tResource: require('./Resource'),\n\tTransaction: require('./Transaction'),\n\tResourceView: require('./ResourceView'),\n\tmiddleware: require('./middleware'),\n\taccessors: require('./accessors'),\n\tselectors: require('./selectors'),\n\tfilters: require('./filters'),\n\terrors: require('./errors'),\n};\n\n_.merge(exports, exports.errors);\n_.merge(exports, exports.filters);\n_.merge(exports, exports.accessors);\n_.merge(exports, exports.selectors);\n_.merge(exports, exports.middleware);\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/Link.js":"var _ = require('lodash');\n\nfunction Link(href, meta) {\n\tif (_.isPlainObject(href) && !meta) {\n\t\tvar link = href;\n\t\thref = link.href;\n\t\tmeta = link.meta;\n\t}\n\tthis._href = href || '';\n\tthis._meta = meta || {};\n}\n\nObject.defineProperty(Link.prototype, 'href', {\n\tget: function() { return this._href; },\n\tset: function(href) { this._href = href; },\n});\n\nObject.defineProperty(Link.prototype, 'meta', {\n\tget: function() { return this._meta; },\n});\n\nLink.prototype.toJSON = function() {\n\tif (_.isEmpty(this._meta))\n\t\treturn this._href;\n\treturn {\n\t\thref: this._href,\n\t\tmeta: this._meta,\n\t};\n};\n\nmodule.exports = Link;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/Field.js":"var _ = require('lodash');\n\nvar Accessor = require('./Accessor');\nvar Const = require('./accessors/Const');\nvar InvalidFieldValue = require('./errors/InvalidFieldValue');\n\nfunction Field(resource, name, value, opts) {\n\topts = _.defaults({}, opts, {\n\t\treadable: true,\n\t\twritable: true,\n\t\tnullable: false,\n\t});\n\tthis._name = name;\n\tthis._resource = resource;\n\tthis._accessor = toAccessor(value);\n\tthis._readable = opts.readable;\n\tthis._writable = opts.writable;\n\tthis._nullable = opts.nullable;\n}\n\nObject.defineProperties(Field.prototype, {\n\tname: { get: function() { return this._name }},\n\tresource: { get: function() { return this._resource }},\n\treadable: { get: function() { return this._readable }},\n\twritable: { get: function() { return this._writable }},\n\tnullable: { get: function() { return this._nullable }},\n});\n\nField.prototype.visitProperties = function(callback) {\n\tthis._accessor.visitProperties(callback);\n};\n\nField.prototype.serialize = function(transaction, object, callback) {\n\tvar self = this;\n\tif (!this._readable) return callback(null);\n\tthis._accessor.serialize(this, transaction, object, function(err, value) {\n\t\tif (err) return callback(err);\n\t\tif (_.isUndefined(value) && !self._nullable)\n\t\t\treturn callback(new InvalidFieldValue(self, undefined));\n\t\treturn callback(null, value);\n\t});\n};\n\nField.prototype.deserialize = function(transaction, resdata, object, callback) {\n\tif (!this._writable) return callback(null, object);\n\tif (_.isUndefined(resdata)) {\n\t\treturn this._nullable\n\t\t\t? callback(null, object)\n\t\t\t: callback(new InvalidFieldValue(this, undefined));\n\t}\n\tthis._accessor.deserialize(this, transaction, resdata, object, callback);\n};\n\nfunction toAccessor(object) {\n\treturn (object instanceof Accessor) ? object : new Const(object);\n}\n\nmodule.exports = Field;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/Accessor.js":"function Accessor() {}\n\nAccessor.prototype.visitProperties = function(callback) {};\n\nAccessor.prototype.serialize = function(field, transaction, object, done) {\n\tdone(null, undefined);\n};\n\nAccessor.prototype.deserialize = function(field, transaction, resdata, object, done) {\n\tdone(null, object);\n};\n\nmodule.exports = Accessor;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/accessors/Const.js":"var inherits = require('util').inherits;\n\nvar Accessor = require('../Accessor');\nvar InvalidFieldValue = require('../errors/InvalidFieldValue');\n\nfunction Const(value) {\n\tthis._value = value;\n}\n\ninherits(Const, Accessor);\n\nConst.prototype.serialize = function(field, transaction, object, done) {\n\tdone(null, this._value);\n};\n\nConst.prototype.deserialize = function(field, transaction, resdata, object, done) {\n\tif (resdata !== this._value) {\n\t\tvar opts = { meta: { expected: this._value }};\n\t\tvar err = new InvalidFieldValue(field, resdata, opts);\n\t\treturn done(err);\n\t}\n\tdone(null, object);\n};\n\nmodule.exports = Const;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/errors/InvalidFieldValue.js":"var util = require('util');\n\nvar ApiError = require('./ApiError');\n\nfunction InvalidFieldValue(field, value, opts) {\n\topts = opts || {};\n\topts.status = 422;\n\topts.detail = 'Invalid Field Value';\n\tApiError.call(this, opts);\n\tthis._field = field;\n\tthis._value = value;\n}\n\nutil.inherits(InvalidFieldValue, ApiError);\n\nObject.defineProperty(InvalidFieldValue.prototype, 'field', {\n\tget: function() { return this._field; },\n});\n\nObject.defineProperty(InvalidFieldValue.prototype, 'value', {\n\tget: function() { return this._value; },\n});\n\nmodule.exports = InvalidFieldValue;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/errors/ApiError.js":"var util = require('util');\n\nvar _ = require('lodash');\n\nfunction ApiError(opts) {\n\topts = _.defaults({}, opts, {\n\t\tmeta: {},\n\t\tlinks: {},\n\t\tstatus: 500,\n\t});\n\tthis._id = opts.id;\n\tthis._code = opts.code;\n\tthis._meta = opts.meta;\n\tthis._links = opts.links;\n\tthis._title = opts.title;\n\tthis._status = opts.status;\n\tthis._detail = opts.detail;\n\tthis._source = opts.source;\n\tError.call(this, opts.detail);\n}\n\nutil.inherits(ApiError, Error);\n\nObject.defineProperties(ApiError.prototype, {\n\tmeta: { get: function() { return this._meta; } },\n\tlinks: { get: function() { return this._links; } },\n\tstatus: { get: function() { return this._status; } },\n});\n\nApiError.prototype.toJSON = function() {\n\tvar object = {};\n\tobject.id = this._id;\n\tobject.code = this._code;\n\tobject.meta = this._meta;\n\tobject.links = this._links;\n\tobject.title = this._title;\n\tobject.status = this._status;\n\tobject.detail = this._detail;\n\tobject.source = this._source;\n\treturn _.omit(object, _.isEmpty);\n};\n\nmodule.exports = ApiError;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/Runtime.js":"var Resource = require('./Resource');\n\nfunction Runtime() {\n\tthis._resources = {};\n};\n\nRuntime.prototype.addResource = function(name, resource) {\n\tif (!(resource instanceof Resource))\n\t\tthrow new TypeError('resource must be of Resource type');\n\tif (!this._resources[name])\n\t\tthis._resources[name] = resource;\n};\n\nRuntime.prototype.getResource = function(name) {\n\treturn this._resources[name];\n};\n\nRuntime.prototype.removeResource = function(name) {\n\tif (this._resources[name])\n\t\tthis._resources[name] = undefined;\n};\n\nmodule.exports = new Runtime;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/Resource.js":"var _ = require('lodash');\n\nvar Field = require('./Field');\nvar Accessor = require('./Accessor');\nvar ResourceView = require('./ResourceView');\n\nfunction Resource(model, descriptor, opts) {\n\tif (!descriptor && _.isPlainObject(model)) {\n\t\tdescriptor = model;\n\t\tmodel = undefined;\n\t}\n\tthis._model = model;\n\tthis._type = descriptor.type;\n\tthis._fields = extractFields(this, descriptor);\n}\n\nObject.defineProperties(Resource.prototype, {\n\ttype: { get: function() { return this._type }},\n\tmodel: { get: function() { return this._model }},\n});\n\nResource.prototype.view = function(transaction) {\n\tvar resview = new ResourceView(transaction, this, this._fields);\n\treturn transaction.transform(this, 'view', resview);\n};\n\nfunction extractFields(self, object, fields) {\n\treturn (function iterate(object, scope, fields) {\n\t\t_.each(object, function(value, key) {\n\t\t\tvar newScope = scope.concat(key);\n\t\t\tvar name = newScope.join('.');\n\t\t\tif (_.isPlainObject(value) && !_.isEmpty(value)) {\n\t\t\t\tif (value instanceof Accessor) {\n\t\t\t\t\tvar field = new Field(self, name, value);\n\t\t\t\t\tfields.push(field);\n\t\t\t\t} else if (isFieldDescriptor(value)) {\n\t\t\t\t\tvar opts = _.omit(value, 'value');\n\t\t\t\t\tvar field = new Field(self, name, value.value, opts);\n\t\t\t\t\tfields.push(field);\n\t\t\t\t} else {\n\t\t\t\t\titerate(value, newScope, fields);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar field = new Field(self, name, value);\n\t\t\t\tfields.push(field);\n\t\t\t}\n\t\t});\n\t\treturn fields;\n\t})(object, [], fields || []);\n}\n\nfunction isFieldDescriptor(object) {\n\tif (!_.isPlainObject(object)) return false;\n\tif (!_.has(object, 'value')) return false;\n\tvar allowedKeys = ['value','readable','writable','nullable'];\n\treturn _.all(object, function(value, key) {\n\t\treturn _.includes(allowedKeys, key);\n\t});\n}\n\nmodule.exports = Resource;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/ResourceView.js":"var util = require('util');\n\nvar _ = require('lodash');\nvar async = require('async');\n\nfunction ResourceView(transaction, resource, fields) {\n\tif (transaction instanceof ResourceView) {\n\t\tvar resview = transaction;\n\t\tcopyFrom(this, resview);\n\t\tif (_.isPlainObject(resource)) {\n\t\t\tvar opts = resource;\n\t\t\tapplyOptions(this, opts);\n\t\t}\n\t} else {\n\t\tthis._root = this;\n\t\tthis._transaction = transaction;\n\t\tthis._resource = resource;\n\t\tsetFields(this, fields);\n\t}\n}\n\nfunction copyFrom(self, resview) {\n\tself._root = resview._root;\n\tself._transaction = resview._transaction;\n\tself._resource = resview._resource;\n\tself._fields = resview._fields;\n\tself._readableFields = resview._readableFields;\n\tself._writableFields = resview._writableFields;\n}\n\nfunction applyOptions(self, opts) {\n\tif (opts.fields) setFields(self, opts.fields);\n}\n\nfunction setFields(self, fields) {\n\tself._fields = {};\n\tself._readableFields = [];\n\tself._writableFields = [];\n\t_.each(fields, function(field) {\n\t\tself._fields[field.name] = field;\n\t\tif (field.readable) self._readableFields.push(field);\n\t\tif (field.writable) self._writableFields.push(field);\n\t});\n}\n\nObject.defineProperties(ResourceView.prototype, {\n\ttype: { get: function() { return this._resource.type }},\n\tmodel: { get: function() { return this._resource.model }},\n});\n\nResourceView.prototype.field = function(name) {\n\tvar self = this;\n\tvar field = this._fields[name];\n\tif (field) return field;\n\tvar knownFields = ['attributes', 'relationships'];\n\t_.each(knownFields, function(prefix) {\n\t\tvar fullName = util.format('%s.%s', prefix, name);\n\t\tfield = self._fields[fullName];\n\t\tif (field) return false;\n\t})\n\treturn field;\n};\n\nResourceView.prototype.visitProperties = function(name, callback) {\n\tvar field = this.field(name);\n\tif (field) field.visitProperties(callback);\n};\n\nResourceView.prototype.select = function(names) {\n\tvar self = this;\n\tif (!_.isArray(names)) names = [names];\n\tvar selected = _(names).map(function(name) {\n\t\treturn self.field(name);\n\t}).compact().uniq().value();\n\treturn new ResourceView(this, { fields: selected });\n};\n\nResourceView.prototype.findOne = function(filter, callback) {\n\tvar transaction = this._transaction;\n\tvar query = this.model.findOne(filter);\n\tquerySelectFields(query, this._fields);\n\ttransaction.notify(this, 'query', query);\n\tif (!callback) return query;\n\tquery.exec(callback);\n};\n\nResourceView.prototype.findMany = function(filter, callback) {\n\tvar transaction = this._transaction;\n\tvar query = this.model.find(filter);\n\tquerySelectFields(query, this._fields);\n\ttransaction.notify(this, 'query', query);\n\tif (!callback) return query;\n\tquery.exec(callback);\n};\n\nfunction querySelectFields(query, fields) {\n\t_.each(fields, function(field) {\n\t\tfield.visitProperties(function(property) {\n\t\t\tquery.select(property);\n\t\t});\n\t});\n}\n\nResourceView.prototype.serialize = function(object, done) {\n\tvar self = this;\n\tvar resdata = {};\n\tasync.each(this._readableFields, function(field, next) {\n\t\tfield.serialize(self._transaction, object, function(err, value) {\n\t\t\tif (err) return next(err);\n\t\t\t_.set(resdata, field.name, value);\n\t\t\tnext();\n\t\t});\n\t}, function(err) {\n\t\terr ? done(err) : done(null, resdata);\n\t});\n};\n\nResourceView.prototype.deserialize = function(resdata, object, done) {\n\tvar self = this;\n\tasync.each(this._writableFields, function(field, next) {\n\t\tvar value = _.get(resdata, field.name);\n\t\tfield.deserialize(self._transaction, value, object, next);\n\t}, function(err) {\n\t\terr ? done(err) : done(null, object);\n\t});\n};\n\nmodule.exports = ResourceView;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/Registry.js":"var util = require('util');\n\nvar Runtime = require('./Runtime');\n\nfunction Registry() {}\n\nRegistry.prototype.add = util.deprecate(function(name, resource) {\n\treturn Runtime.addResource(name, resource);\n}, [\n\t'Registry#add has been deprecated and will soon be removed. ',\n\t'Consider using Runtime#addResource instead.',\n].join(''));\n\nRegistry.prototype.get = util.deprecate(function(name) {\n\treturn Runtime.getResource(name);\n}, [\n\t'Registry#get has been deprecated and will soon be removed. ',\n\t'Consider using Runtime#getResource instead.',\n].join(''));\n\nRegistry.prototype.remove = util.deprecate(function(name) {\n\tRuntime.removeResource(name);\n}, [\n\t'Registry#remove has been deprecated and will soon be removed. ',\n\t'Consider using Runtime#removeResource instead.',\n].join(''));\n\nmodule.exports = new Registry;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/Response.js":"var _ = require('lodash');\nvar mongoose = require('mongoose');\nvar ObjectId = mongoose.Types.ObjectId;\n\nfunction Response(res) {\n\tthis._res = res;\n\tthis._meta = {};\n\tthis._links = {};\n\tthis._errors = [];\n\tthis._included = [];\n}\n\nObject.defineProperties(Response.prototype, {\n\traw: { get: function() { return this._res } },\n\tmeta: { get: function() { return this._meta } },\n\tlinks: { get: function() { return this._links } },\n\terrors: { get: function() { return this._errors } },\n});\n\nResponse.prototype.error = function(err) {\n\tthis._errors.push(err);\n\treturn this;\n};\n\nObject.defineProperty(Response.prototype, 'included', {\n\tget: function() { return this._included; },\n});\n\nResponse.prototype.include = function(type, id, data) {\n\tvar include = _.find(this._included, function(include) {\n\t\treturn include.type === type && include.id.equals(id);\n\t});\n\tif (!data) return include;\n\tif (!include) {\n\t\tinclude = {};\n\t\tthis._included.push(include);\n\t}\n\t_.assign(include, data, { type: type, id: new ObjectId(id) });\n\treturn this;\n};\n\nObject.defineProperty(Response.prototype, 'data', {\n\tget: function() { return this._data; },\n\tset: function(data) { this._data = data; },\n});\n\nResponse.prototype.toJSON = function() {\n\tvar object = {};\n\tobject.meta = this._meta;\n\tobject.links = this._links;\n\tobject.errors = this._errors;\n\tobject.included = this._included;\n\tobject.jsonapi = { version: '1.0' };\n\tobject = _.omit(object, _.isEmpty);\n\tif (!_.isUndefined(this._data) && _.isEmpty(this._errors))\n\t\tobject.data = this._data;\n\treturn object;\n};\n\n\nResponse.prototype.send = function(data) {\n\tvar res = this._res;\n\tres.contentType('application/vnd.api+json');\n\tif (!_.isEmpty(this._errors))\n\t\tres.statusCode = aproximateErrorCode(this._errors);\n\tif (!_.isUndefined(data)) this._data = data;\n\tres.json(this);\n};\n\nfunction aproximateErrorCode(errors) {\n\treturn _(errors).pluck('status').reduce(function(status, errCode) {\n\t\tif (errCode === status) return status;\n\t\tvar prev = genericErrorCode(status);\n\t\tvar next = genericErrorCode(errCode);\n\t\treturn Math.max(prev, next);\n\t});\n}\n\nfunction genericErrorCode(status) {\n\treturn status - status % 100;\n}\n\nmodule.exports = Response;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/Transaction.js":"var util = require('util');\n\nvar _ = require('lodash');\n\nfunction Transaction(resource, response) {\n\tthis._resource = resource;\n\tthis._response = response;\n\tthis._handlers = {};\n}\n\nObject.defineProperty(Transaction.prototype, 'resource', {\n\tget: function() { return this._resource; },\n});\n\nObject.defineProperty(Transaction.prototype, 'response', {\n\tget: function() { return this._response; },\n});\n\nTransaction.prototype.subscribe = function(type, what, handler) {\n\tvar key = util.format('%s.%s', type, what);\n\tvar handlers = this._handlers[key];\n\tif (handlers) {\n\t\thandlers.push(handler);\n\t} else {\n\t\thandlers = [handler];\n\t\tthis._handlers[key] = handlers;\n\t}\n};\n\nTransaction.prototype.unsubscribe = function(type, what, handler) {\n\tvar key = util.format('%s.%s', type, what);\n\tvar handlers = this._handlers[key];\n\tif (!handlers) return;\n\t_.remove(handlers, _.partial(_.eq, handler));\n\tif (_.isEmpty(handlers)) this._handlers[key] = undefined;\n};\n\nTransaction.prototype.notify = function(resource, what) {\n\tvar params = _.slice(arguments, 2);\n\tvar key = util.format('%s.%s', resource.type, what);\n\tvar handlers = this._handlers[key];\n\tif (!handlers) return false;\n\tvar args = [resource].concat(params);\n\t_.each(handlers, function(handler) {\n\t\thandler.apply(null, args);\n\t});\n\treturn true;\n};\n\nTransaction.prototype.transform = function(resource, what) {\n\tvar params = _.slice(arguments, 2);\n\tvar value = params.pop();\n\tvar key = util.format('%s.%s', resource.type, what);\n\tvar handlers = this._handlers[key];\n\tif (!handlers) return value;\n\tvar index = 1 + params.length;\n\tvar args = [resource].concat(params, value);\n\treturn _.reduce(handlers, function(value, handler) {\n\t\tvar result = handler.apply(null, args);\n\t\targs.splice(index, 1, result);\n\t\treturn result;\n\t}, value);\n};\n\nmodule.exports = Transaction;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/index.js":"module.exports = {\n\tread: require('./read'),\n\tcreate: require('./create'),\n\tassign: require('./assign'),\n\tupdate: require('./update'),\n\tmodify: require('./modify'),\n\tremove: require('./remove'),\n\tenumerate: require('./enumerate'),\n\terrorHandler: require('./errorHandler'),\n};\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/read.js":"var _ = require('lodash');\nvar async = require('async');\n\nvar common = require('./common');\nvar filters = require('../filters');\nvar ResourceNotFound = require('../errors/ResourceNotFound');\n\nvar defaultOpts = {\n\tstrict: false,\n\tfilters: [\n\t\tfilters.select(),\n\t\tfilters.sort(),\n\t],\n};\n\nfunction read(chain, opts) {\n\topts = _.defaults({}, opts, defaultOpts);\n\tchain = common.parseChain(chain);\n\treturn middleware;\n\n\tfunction middleware(req, res, next) {\n\t\tvar lastLink = _.last(chain);\n\t\tvar resource = lastLink.resource;\n\t\tvar transaction = common.initTransaction(resource, res);\n\t\t_.each(opts.filters, function(filter) { filter(transaction) });\n\t\ttransaction.notify(resource, 'start', req);\n\t\tasync.waterfall([\n\t\t\tfunction(next) {\n\t\t\t\tcommon.applyChain(transaction, chain, req, next);\n\t\t\t},\n\t\t\tfunction(object, next) {\n\t\t\t\tvar resview = resource.view(transaction);\n\t\t\t\tresview.serialize(object, next);\n\t\t\t},\n\t\t], function(err, resdata) {\n\t\t\tif (err) return next(err);\n\t\t\tvar response = transaction.response;\n\t\t\tresponse.links.self = req.originalUrl;\n\t\t\tresponse.data = resdata;\n\t\t\ttransaction.notify(resource, 'end');\n\t\t\tresponse.send();\n\t\t\tnext();\n\t\t});\n\t}\n}\n\nmodule.exports = exports = read;\nexports.defaultOptions = defaultOpts;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/common.js":"var _ = require('lodash');\nvar async = require('async');\n\nvar Runtime = require('../Runtime');\nvar Response = require('../Response');\nvar Transaction = require('../Transaction');\nvar ResourceNotFound = require('../errors/ResourceNotFound');\n\nfunction initTransaction(resource, res) {\n\tvar assignProperty = 'jsonapify.transaction';\n\tvar transaction = _.get(res, assignProperty);\n\tif (!transaction) {\n\t\tvar response = new Response(res);\n\t\ttransaction = new Transaction(resource, response);\n\t\t_.set(res, assignProperty, transaction);\n\t}\n\treturn transaction;\n}\n\nfunction parseChain(chain) {\n\tif (!_.isArray(chain)) chain = [chain];\n\tvar chunks = _.chunk(chain, 2);\n\treturn _.map(chunks, function(chunk) {\n\t\treturn {\n\t\t\tresource: Runtime.getResource(chunk[0]),\n\t\t\tselector: chunk[1],\n\t\t};\n\t});\n}\n\nfunction resolveSelector(selector, req, parent) {\n\tif (_.isFunction(selector))\n\t\tselector = { _id: selector };\n\treturn (function iterate(object, result) {\n\t\t_.each(object, function(value, key) {\n\t\t\tif (_.isPlainObject(value) && !_.isEmpty(value)) {\n\t\t\t\tvar subobj = {};\n\t\t\t\titerate(value, subobj);\n\t\t\t\t_.set(result, key, subobj);\n\t\t\t} else if (_.isFunction(value)) {\n\t\t\t\t_.set(result, key, value(req, parent));\n\t\t\t} else {\n\t\t\t\t_.set(result, key, value);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t})(selector, {});\n}\n\nfunction applyChain(transaction, chain, req, callback) {\n\treturn async.reduce(chain, null, function(parent, link, next) {\n\t\tvar resource = link.resource;\n\t\tvar resview = resource.view(transaction);\n\t\tvar filter = resolveSelector(link.selector, req, parent);\n\t\tresview.findOne(filter, function(err, object) {\n\t\t\tif (err) return next(err);\n\t\t\tif (!object) return next(new ResourceNotFound(resource, filter));\n\t\t\tnext(null, object);\n\t\t});\n\t}, callback);\n}\n\nexports.parseChain = parseChain;\nexports.initTransaction = initTransaction;\nexports.resolveSelector = resolveSelector;\nexports.applyChain = applyChain;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/errors/ResourceNotFound.js":"var util = require('util');\n\nvar ApiError = require('./ApiError');\n\nfunction ResourceNotFound(resource, anchor, opts) {\n\topts = opts || {};\n\topts.status = 404;\n\topts.detail = 'Resource Not Found';\n\tApiError.call(this, opts);\n\tthis._resource = resource;\n\tthis._anchor = anchor;\n};\n\nutil.inherits(ResourceNotFound, ApiError);\n\nObject.defineProperty(ResourceNotFound.prototype, 'resource', {\n\tget: function() { return this._resource; },\n});\n\nObject.defineProperty(ResourceNotFound.prototype, 'anchor', {\n\tget: function() { return this._anchor; },\n});\n\nmodule.exports = ResourceNotFound;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/filters/index.js":"module.exports = {\n\tsort: require('./sort'),\n\tselect: require('./select'),\n\tfilter: require('./filter'),\n\tpaginate: require('./paginate'),\n\tpaginateOffset: require('./paginateOffset'),\n};\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/filters/sort.js":"var _ = require('lodash');\n\nvar common = require('./common');\n\nfunction sort() {\n\treturn common.createFilter(queryParser, function(transaction, req, type, fields) {\n\t\ttransaction.subscribe(type, 'query', function(resview, query) {\n\t\t\t_.each(fields, function(field) {\n\t\t\t\tresview.visitProperties(field.name, function(property) {\n\t\t\t\t\tvar param = _.set({}, property, field.order);\n\t\t\t\t\tquery.sort(param);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction queryParser(req, callback) {\n\tvar params = req.query['sort'];\n\tif (!_.isArray(params)) params = [params];\n\t_.each(params, function(param) {\n\t\tif (_.isString(param)) {\n\t\t\tcallback(parseParam(param));\n\t\t} else if (_.isPlainObject(param)) {\n\t\t\t_.each(param, function(param, restype) {\n\t\t\t\tcallback(restype, parseParam(param));\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction parseParam(param) {\n\treturn _.map(param.split(','), function(string) {\n\t\tif (_.startsWith(string, '+')) {\n\t\t\treturn { name: string.slice(1), order: 1 };\n\t\t} else if (_.startsWith(string, '-')) {\n\t\t\treturn { name: string.slice(1), order: -1 };\n\t\t} else {\n\t\t\treturn { name: string, order: 1 };\n\t\t}\n\t});\n}\n\nmodule.exports = sort;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/filters/common.js":"var url = require('url');\nvar qs = require('qs');\n\nvar _ = require('lodash');\n\nfunction createFilter(queryParse, handler) {\n\treturn function(transaction) {\n\t\tvar restype = transaction.resource.type;\n\t\ttransaction.subscribe(restype, 'start', function(resource, req) {\n\t\t\tqueryParse(req, function(type, params) {\n\t\t\t\tif (_.isUndefined(params)) {\n\t\t\t\t\tparams = type;\n\t\t\t\t\ttype = restype;\n\t\t\t\t}\n\t\t\t\thandler(transaction, req, type, params);\n\t\t\t});\n\t\t});\n\t};\n}\n\nfunction modifyQuery(uri, query) {\n\tvar info = url.parse(uri);\n\tvar queryObj = qs.parse(info.query);\n\tqueryObj = _.merge(queryObj, query);\n\tinfo.search = '?' + qs.stringify(queryObj, { encode: false });\n\treturn url.format(info);\n}\n\nexports.createFilter = createFilter;\nexports.modifyQuery = modifyQuery;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/filters/select.js":"var _ = require('lodash');\n\nvar common = require('./common');\n\nfunction select() {\n\treturn common.createFilter(queryParser, function(transaction, req, type, fields) {\n\t\ttransaction.subscribe(type, 'view', function(resource, resview) {\n\t\t\tfields = ['type', 'id'].concat(fields);\n\t\t\treturn resview.select(fields);\n\t\t});\n\t});\n}\n\nfunction queryParser(req, callback) {\n\tvar params = req.query['fields'];\n\tif (!_.isArray(params)) params = [params];\n\t_.each(params, function(param) {\n\t\tif (_.isString(param)) {\n\t\t\tcallback(param.split(','));\n\t\t} else if (_.isPlainObject(param)) {\n\t\t\t_.each(param, function(fields, restype) {\n\t\t\t\tcallback(restype, fields.split(','));\n\t\t\t});\n\t\t}\n\t});\n}\n\nmodule.exports = select;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/filters/filter.js":"var _ = require('lodash');\nvar glob2re = require('glob2re');\n\nvar common = require('./common');\n\nfunction filter() {\n\treturn common.createFilter(queryParser, function(transaction, req, type, param) {\n\t\tvar filters = parseParam(param);\n\t\ttransaction.subscribe(type, 'query', function(resview, query) {\n\t\t\t_.each(filters, function(filter, field) {\n\t\t\t\tresview.visitProperties(field, _.partialRight(filter, query));\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction queryParser(req, callback) {\n\tvar params = req.query['filter'];\n\tif (!_.isArray(params)) params = [params];\n\t_.each(params, function(param) {\n\t\tif (_.isPlainObject(param))\n\t\t\tcallback(param);\n\t});\n}\n\nfunction parseParam(param) {\n\treturn _(param).pick(_.isString).mapValues(function(filter) {\n\t\tif (isReFilter(filter)) return reFilter(filter);\n\t\tif (isEqFilter(filter)) return eqFilter(filter);\n\t\tif (isGeFilter(filter)) return geFilter(filter);\n\t\tif (isGtFilter(filter)) return gtFilter(filter);\n\t\tif (isLeFilter(filter)) return leFilter(filter);\n\t\tif (isLtFilter(filter)) return ltFilter(filter);\n\t\tif (isNeFilter(filter)) return neFilter(filter);\n\t\treturn strMatchFilter(filter);\n\t}).value();\n}\n\nfunction isReFilter(expr) { return _.startsWith(expr, '=~'); }\nfunction isEqFilter(expr) { return _.startsWith(expr, '='); }\nfunction isNeFilter(expr) { return _.startsWith(expr, '!='); }\nfunction isGeFilter(expr) { return _.startsWith(expr, '>='); }\nfunction isLeFilter(expr) { return _.startsWith(expr, '<='); }\nfunction isGtFilter(expr) { return _.startsWith(expr, '>'); }\nfunction isLtFilter(expr) { return _.startsWith(expr, '<'); }\n\nfunction eqFilter(filter) {\n\tvar value = filter.slice(1);\n\treturn function(property, query) {\n\t\tquery.where(property).equals(value);\n\t};\n}\n\nfunction geFilter(filter) {\n\tvar value = filter.slice(2);\n\treturn function(property, query) {\n\t\tquery.where(property).gte(value);\n\t};\n}\n\nfunction gtFilter(filter) {\n\tvar value = filter.slice(1);\n\treturn function(property, query) {\n\t\tquery.where(property).gt(value);\n\t};\n}\n\nfunction leFilter(filter) {\n\tvar value = filter.slice(2);\n\treturn function(property, query) {\n\t\tquery.where(property).lte(value);\n\t};\n}\n\nfunction ltFilter(filter) {\n\tvar value = filter.slice(1);\n\treturn function(property, query) {\n\t\tquery.where(property).lt(value);\n\t};\n}\n\nfunction neFilter(filter) {\n\tvar value = filter.slice(2);\n\treturn function(property, query) {\n\t\tquery.where(property).ne(value);\n\t};\n}\n\nfunction reFilter(filter) {\n\tvar beg = filter.indexOf('/', 2);\n\tvar end = filter.lastIndexOf('/');\n\tvar pattern = filter.slice(beg + 1, end);\n\tvar flags = filter.slice(end + 1);\n\tvar re = new RegExp(pattern, flags);\n\treturn function(property, query) {\n\t\tvar condition = _.set({}, property, re);\n\t\tquery.where(condition);\n\t};\n}\n\nfunction strMatchFilter(filter) {\n\tvar re = glob2re(filter);\n\treturn function(property, query) {\n\t\tvar condition = _.set({}, property, re);\n\t\tquery.where(condition);\n\t};\n}\n\nmodule.exports = filter;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/filters/paginate.js":"var common = require('./common');\n\nvar _ = require('lodash');\n\nfunction paginate() {\n\treturn common.createFilter(queryParser, function(transaction, req, type, params) {\n\t\tvar pageNumber = params.number, pageSize = params.size;\n\n\t\ttransaction.subscribe(type, 'query', function(resource, query) {\n\t\t\tquery.skip((pageNumber - 1) * pageSize).limit(pageSize);\n\t\t});\n\n\t\ttransaction.subscribe(type, 'end', function(resource) {\n\t\t\tvar selfLink = req.originalUrl;\n\t\t\tvar response = transaction.response;\n\t\t\tvar count = response.meta['count'];\n\t\t\tvar pageCount = Math.ceil(count / pageSize);\n\t\t\tresponse.links['first'] = common.modifyQuery(selfLink, { page: { number: 1 }});\n\t\t\tresponse.links['last'] = common.modifyQuery(selfLink, { page: { number: pageCount }});\n\t\t\tif (pageNumber > 1)\n\t\t\t\tresponse.links['prev'] = common.modifyQuery(selfLink, { page: { number: pageNumber - 1 }});\n\t\t\tif (pageNumber < pageCount)\n\t\t\t\tresponse.links['next'] = common.modifyQuery(selfLink, { page: { number: pageNumber + 1 }});\n\t\t});\n\t});\n}\n\nfunction queryParser(req, callback) {\n\tvar param = req.query['page'];\n\tvar pageInfo = _.pick(param, 'size', 'number');\n\tif (pageInfo.size !== undefined && pageInfo.number !== undefined)\n\t\tcallback(pageInfo);\n}\n\nmodule.exports = paginate;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/filters/paginateOffset.js":"var common = require('./common');\n\nvar _ = require('lodash');\n\nfunction paginate() {\n\treturn common.createFilter(queryParser, function(transaction, req, type, params) {\n\t\tvar pageOffset = params.offset, pageLimit = params.limit;\n\n\t\ttransaction.subscribe(type, 'query', function(resource, query) {\n\t\t\tquery.skip(pageOffset).limit(pageLimit);\n\t\t});\n\n\t\ttransaction.subscribe(type, 'end', function(resource) {\n\t\t\tvar selfLink = req.originalUrl;\n\t\t\tvar response = transaction.response;\n\t\t\tvar count = response.meta['count'];\n\t\t\tresponse.links['first'] = common.modifyQuery(selfLink, { page: {\n\t\t\t\toffset: 0\n\t\t\t}});\n\t\t\tresponse.links['last'] = common.modifyQuery(selfLink, { page: {\n\t\t\t\toffset: count - pageLimit\n\t\t\t}});\n\t\t\tif (pageOffset > 0) {\n\t\t\t\tresponse.links['prev'] = common.modifyQuery(selfLink, { page: {\n\t\t\t\t\toffset: (pageOffset - pageLimit < 0) ? 0 : pageOffset - pageLimit\n\t\t\t\t}});\n\t\t\t}\n\t\t\tif ((pageOffset + pageLimit) < count) {\n\t\t\t\tresponse.links['next'] = common.modifyQuery(selfLink, { page: {\n\t\t\t\t\toffset: pageOffset + pageLimit\n\t\t\t\t}});\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction queryParser(req, callback) {\n\tvar param = req.query['page'];\n\tvar pageInfo = _.pick(param, 'offset', 'limit');\n\tif (pageInfo.offset !== undefined && pageInfo.limit !== undefined)\n\t\tcallback(pageInfo);\n}\n\nmodule.exports = paginate;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/create.js":"var _ = require('lodash');\nvar async = require('async');\n\nvar common = require('./common');\n\nvar defaultOpts = {\n\tstrict: false,\n\tnoWait: false,\n\tfilters: null,\n};\n\nfunction create(chain, opts) {\n\topts = _.defaults({}, opts, defaultOpts);\n\tchain = common.parseChain(chain);\n\tvar lastLink = chain.pop();\n\treturn middleware;\n\n\tfunction middleware(req, res, next) {\n\t\tvar resource = lastLink.resource;\n\t\tvar transaction = common.initTransaction(resource, res);\n\t\t_.each(opts.filters, function(filter) { filter(transaction) });\n\t\ttransaction.notify(resource, 'start', req);\n\t\tasync.waterfall([\n\t\t\tfunction(next) {\n\t\t\t\tcommon.applyChain(transaction, chain, req, next);\n\t\t\t},\n\t\t\tfunction(parent, next) {\n\t\t\t\tvar selector = lastLink.selector;\n\t\t\t\tvar filter = common.resolveSelector(selector, req, parent);\n\t\t\t\tvar object = new resource.model(filter);\n\t\t\t\tvar resview = resource.view(transaction);\n\t\t\t\tresview.deserialize(req.body.data, object, function(err) {\n\t\t\t\t\terr ? next(err) : next(null, object, resview);\n\t\t\t\t});\n\t\t\t},\n\t\t], function(err, object, resview) {\n\t\t\tif (err) return next(err);\n\t\t\tvar response = transaction.response;\n\t\t\tresponse.links['self'] = req.originalUrl;\n\t\t\tif (opts.noWait) {\n\t\t\t\tresponse.raw.statusCode = 202;\n\t\t\t\ttransaction.notify(resource, 'end');\n\t\t\t\tresponse.send(null);\n\t\t\t\tobject.save(next);\n\t\t\t} else {\n\t\t\t\tasync.parallel({\n\t\t\t\t\tsave: function(next) {\n\t\t\t\t\t\tobject.save(next);\n\t\t\t\t\t},\n\t\t\t\t\tdata: function(next) {\n\t\t\t\t\t\tresview.serialize(object, next);\n\t\t\t\t\t},\n\t\t\t\t}, function(err, results) {\n\t\t\t\t\tif (err) return next(err);\n\t\t\t\t\tvar data = results.data;\n\t\t\t\t\tresponse.data = data;\n\t\t\t\t\tresponse.raw.statusCode = 201;\n\t\t\t\t\tvar location = _.get(data, 'links.self');\n\t\t\t\t\tif (location) response.raw.set('Location', location);\n\t\t\t\t\ttransaction.notify(resource, 'end');\n\t\t\t\t\tresponse.send();\n\t\t\t\t\tnext();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = exports = create;\nexports.defaultOptions = defaultOpts;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/assign.js":"var _ = require('lodash');\nvar async = require('async');\n\nvar common = require('./common');\n\nvar defaultOpts = {\n\tstrict: false,\n\tnoWait: false,\n\tfilters: null,\n};\n\nfunction assign(chain, opts) {\n\topts = _.defaults({}, opts, defaultOpts);\n\tchain = common.parseChain(chain);\n\tvar lastLink = chain.pop();\n\treturn middleware;\n\n\tfunction middleware(req, res, next) {\n\t\tvar resource = lastLink.resource;\n\t\tvar transaction = common.initTransaction(resource, res);\n\t\t_.each(opts.filters, function(filter) { filter(transaction) });\n\t\ttransaction.notify(resource, 'start', req);\n\t\tasync.waterfall([\n\t\t\tfunction(next) {\n\t\t\t\tcommon.applyChain(transaction, chain, req, next);\n\t\t\t},\n\t\t\tfunction(parent, next) {\n\t\t\t\tvar selector = lastLink.selector;\n\t\t\t\tvar resview = resource.view(transaction);\n\t\t\t\tvar filter = common.resolveSelector(selector, req, parent);\n\t\t\t\tresview.findOne(filter, function(err, object) {\n\t\t\t\t\tif (err) return next(err);\n\t\t\t\t\tobject = object || new resource.model(filter);\n\t\t\t\t\tnext(null, object, resview);\n\t\t\t\t});\n\t\t\t},\n\t\t\tfunction(object, resview, next) {\n\t\t\t\tresview.deserialize(req.body.data, object, function(err, data) {\n\t\t\t\t\terr ? next(err) : next(null, data, resview);\n\t\t\t\t});\n\t\t\t},\n\t\t], function(err, object, resview) {\n\t\t\tif (err) return next(err);\n\t\t\tvar response = transaction.response;\n\t\t\tif (opts.noWait) {\n\t\t\t\tresponse.raw.statusCode = 202;\n\t\t\t\ttransaction.notify(resource, 'end');\n\t\t\t\tresponse.send(null);\n\t\t\t\tobject.save(next);\n\t\t\t} else {\n\t\t\t\tasync.parallel({\n\t\t\t\t\tsave: function(next) {\n\t\t\t\t\t\tobject.save(next);\n\t\t\t\t\t},\n\t\t\t\t\tdata: function(next) {\n\t\t\t\t\t\tresview.serialize(object, next);\n\t\t\t\t\t},\n\t\t\t\t}, function(err, results) {\n\t\t\t\t\tif (err) return next(err);\n\t\t\t\t\tresponse.data = results.data;\n\t\t\t\t\ttransaction.notify(resource, 'end');\n\t\t\t\t\tresponse.send();\n\t\t\t\t\tnext();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = exports = assign;\nexports.defaultOptions = defaultOpts;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/update.js":"var _ = require('lodash');\nvar async = require('async');\n\nvar common = require('./common');\n\nvar defaultOpts = {\n\tstrict: false,\n\tnoWait: false,\n\tfilters: null,\n};\n\nfunction update(chain, opts) {\n\topts = _.defaults({}, opts, defaultOpts);\n\tchain = common.parseChain(chain);\n\treturn middleware;\n\n\tfunction middleware(req, res, next) {\n\t\tvar resource = _.last(chain).resource;\n\t\tvar transaction = common.initTransaction(resource, res);\n\t\t_.each(opts.filters, function(filter) { filter(transaction) });\n\t\ttransaction.notify(resource, 'start', req);\n\t\tcommon.applyChain(transaction, chain, req, function(err, object) {\n\t\t\tif (err) return next(err);\n\t\t\tvar resview = resource.view(transaction);\n\t\t\tresview.deserialize(req.body.data, object, function(err) {\n\t\t\t\tif (err) return next(err);\n\t\t\t\tvar response = transaction.response;\n\t\t\t\tif (opts.noWait) {\n\t\t\t\t\tresponse.raw.statusCode = 202;\n\t\t\t\t\ttransaction.notify(resource, 'end');\n\t\t\t\t\tresponse.send(null);\n\t\t\t\t\tobject.save(next);\n\t\t\t\t} else {\n\t\t\t\t\tasync.parallel({\n\t\t\t\t\t\tsave: function(next) {\n\t\t\t\t\t\t\tobject.save(next);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: function(next) {\n\t\t\t\t\t\t\tresview.serialize(object, next);\n\t\t\t\t\t\t},\n\t\t\t\t\t}, function(err, results) {\n\t\t\t\t\t\tif (err) return next(err);\n\t\t\t\t\t\tresponse.data = results.data;\n\t\t\t\t\t\ttransaction.notify(resource, 'end');\n\t\t\t\t\t\tresponse.send();\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = exports = update;\nexports.defaultOptions = defaultOpts;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/modify.js":"var _ = require('lodash');\nvar async = require('async');\nvar jsonpatch = require('jsonpatch');\n\nvar common = require('./common');\n\nvar defaultOpts = {\n\tstrict: false,\n\tfilters: null,\n};\n\nfunction modify(chain, opts) {\n\topts = _.defaults({}, opts, defaultOpts);\n\tchain = common.parseChain(chain);\n\treturn middleware;\n\n\tfunction middleware(req, res, next) {\n\t\tvar resource = _.last(chain).resource;\n\t\tvar transaction = common.initTransaction(resource, res);\n\t\t_.each(opts.filters, function(filter) { filter(transaction) });\n\t\ttransaction.notify(resource, 'start', req);\n\t\tasync.waterfall([\n\t\t\tfunction(next) {\n\t\t\t\tcommon.applyChain(transaction, chain, req, next);\n\t\t\t},\n\t\t\tfunction(object, next) {\n\t\t\t\tvar resview = resource.view(transaction);\n\t\t\t\tresview.serialize(object, function(err, data) {\n\t\t\t\t\terr ? next(err) : next(null, data, resview, object);\n\t\t\t\t});\n\t\t\t},\n\t\t\tfunction(data, resview, object, next) {\n\t\t\t\ttry {\n\t\t\t\t\tvar result = jsonpatch.apply_patch(data, req.body.data);\n\t\t\t\t\tresview.deserialize(result, object, function(err) {\n\t\t\t\t\t\terr ? next(err) : next(null, object, result);\n\t\t\t\t\t});\n\t\t\t\t} catch (err) { return next(err) }\n\t\t\t},\n\t\t\tfunction(object, result, next) {\n\t\t\t\tobject.save(function(err) {\n\t\t\t\t\terr ? next(err) : next(null, result);\n\t\t\t\t});\n\t\t\t},\n\t\t], function(err, resdata) {\n\t\t\tif (err) return next(err);\n\t\t\tvar response = transaction.response;\n\t\t\tresponse.data = resdata;\n\t\t\ttransaction.notify(resource, 'end');\n\t\t\tresponse.send();\n\t\t\tnext();\n\t\t});\n\t}\n}\n\nmodule.exports = exports = modify;\nexports.defaultOptions = defaultOpts;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/remove.js":"var _ = require('lodash');\nvar async = require('async');\n\nvar common = require('./common');\n\nvar defaultOpts = {\n\tstrict: false,\n\tfilters: null,\n};\n\nfunction remove(chain, opts) {\n\topts = _.defaults({}, opts, defaultOpts);\n\tchain = common.parseChain(chain);\n\treturn middleware;\n\n\tfunction middleware(req, res, next) {\n\t\tvar resource = _.last(chain).resource;\n\t\tvar transaction = common.initTransaction(resource, res);\n\t\t_.each(opts.filters, function(filter) { filter(transaction) });\n\t\ttransaction.notify(resource, 'start', req);\n\t\tcommon.applyChain(transaction, chain, req, function(err, object) {\n\t\t\tif (err) return next(err);\n\t\t\tvar response = transaction.response;\n\t\t\tif (opts.noWait) {\n\t\t\t\tresponse.raw.statusCode = 202;\n\t\t\t\ttransaction.notify(resource, 'end');\n\t\t\t\tresponse.send(null);\n\t\t\t\tobject.remove(next);\n\t\t\t} else {\n\t\t\t\tobject.remove(function(err) {\n\t\t\t\t\tif (err) return next(err);\n\t\t\t\t\tresponse.raw.statusCode = 204;\n\t\t\t\t\ttransaction.notify(resource, 'end');\n\t\t\t\t\tresponse.send(null);\n\t\t\t\t\tnext();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = exports = remove;\nexports.defaultOptions = defaultOpts;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/enumerate.js":"var _ = require('lodash');\nvar async = require('async');\n\nvar common = require('./common');\nvar filters = require('../filters');\n\nvar defaultOpts = {\n\tstrict: false,\n\tfilters: [\n\t\tfilters.sort(),\n\t\tfilters.filter(),\n\t\tfilters.select(),\n\t\tfilters.paginateOffset(),\n\t],\n};\n\nfunction enumerate(chain, opts) {\n\topts = _.defaults({}, opts, defaultOpts);\n\tchain = common.parseChain(chain);\n\tvar lastLink = chain.pop();\n\treturn middleware;\n\n\tfunction middleware(req, res, next) {\n\t\tvar resource = lastLink.resource;\n\t\tvar transaction = common.initTransaction(resource, res);\n\t\t_.each(opts.filters, function(filter) { filter(transaction) });\n\t\ttransaction.notify(resource, 'start', req);\n\t\tasync.waterfall([\n\t\t\tfunction(next) {\n\t\t\t\tcommon.applyChain(transaction, chain, req, next);\n\t\t\t},\n\t\t\tfunction(parent, next) {\n\t\t\t\tvar selector = lastLink.selector;\n\t\t\t\tvar filter = common.resolveSelector(selector, req, parent);\n\t\t\t\tvar resview = resource.view(transaction);\n\t\t\t\tasync.parallel({\n\t\t\t\t\tdata: function(next) {\n\t\t\t\t\t\tresview.findMany(filter, function(err, objects) {\n\t\t\t\t\t\t\tif (err) return next(err);\n\t\t\t\t\t\t\tasync.map(objects, function(object, next) {\n\t\t\t\t\t\t\t\tresview.serialize(object, next);\n\t\t\t\t\t\t\t}, next);\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tcount: function(next) {\n\t\t\t\t\t\tresview.model.where(filter).count(next);\n\t\t\t\t\t},\n\t\t\t\t}, next);\n\t\t\t},\n\t\t], function(err, results) {\n\t\t\tif (err) return next(err);\n\t\t\tvar response = transaction.response;\n\t\t\tresponse.meta.count = results.count;\n\t\t\tresponse.links.self = req.originalUrl;\n\t\t\tresponse.data = results.data;\n\t\t\ttransaction.notify(resource, 'end');\n\t\t\tresponse.send();\n\t\t\tnext();\n\t\t});\n\t}\n}\n\nmodule.exports = exports = enumerate;\nexports.defaultOptions = defaultOpts;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/middleware/errorHandler.js":"var common = require('./common');\nvar ApiError = require('../errors/ApiError');\nvar UnknownError = require('../errors/UnknownError');\n\nfunction errorHandler() {\n\treturn middleware;\n\t\n\tfunction middleware(err, req, res, next) {\n\t\tvar transaction = common.initTransaction(null, res);\n\t\tvar response = transaction.response;\n\t\tif (!(err instanceof ApiError))\n\t\t\terr = new UnknownError(err);\n\t\tresponse.error(err);\n\t\tresponse.send();\n\t}\n}\n\nmodule.exports = errorHandler;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/errors/UnknownError.js":"var util = require('util');\n\nvar ApiError = require('./ApiError');\n\nfunction UnknownError(err, opts) {\n\topts = opts || {};\n\topts.status = 500;\n\topts.detail = err.message;\n\tApiError.call(this, opts);\n}\n\nutil.inherits(UnknownError, ApiError);\n\nmodule.exports = UnknownError;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/accessors/index.js":"module.exports = {\n\tRef: require('./Ref'),\n\tRefs: require('./Refs'),\n\tConst: require('./Const'),\n\tProperty: require('./Property'),\n\tTemplate: require('./Template'),\n};\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/accessors/Ref.js":"var inherits = require('util').inherits;\n\nvar _ = require('lodash');\nvar async = require('async');\nvar mongoose = require('mongoose');\nvar ObjectId = mongoose.Types.ObjectId;\n\nvar Runtime = require('../Runtime');\nvar Accessor = require('../Accessor');\nvar ResourceNotFound = require('../errors/ResourceNotFound');\nvar InvalidFieldValue = require('../errors/InvalidFieldValue');\n\nfunction Ref(resourceName, thisPath, opts) {\n\topts = opts || {};\n\tthis._resourceName = resourceName;\n\tthis._thisPath = thisPath;\n\tthis._links = opts.links;\n\tthis._meta = opts.meta;\n}\n\ninherits(Ref, Accessor);\n\nRef.prototype.visitProperties = function(callback) {\n\tcallback(this._thisPath);\n};\n\nRef.prototype.serialize = function(field, transaction, object, done) {\n\tvar self = this;\n\tvar id = _.get(object, this._thisPath);\n\tif (_.isUndefined(id)) return done(null);\n\tvar resource = Runtime.getResource(this._resourceName);\n\tvar response = transaction.response;\n\tvar resview = resource.view(transaction);\n\tresview.findOne({ _id: id }, function(err, linked) {\n\t\tif (err) return done(err);\n\t\tif (!linked) return done(new ResourceNotFound(resource, { _id: id }));\n\t\tresview.serialize(linked, function(err, linkedData) {\n\t\t\tif (err) return done(err);\n\t\t\tvar resdata = _.pick(linkedData, 'type', 'id');\n\t\t\tvar isIncluded = transaction.transform(field.resource, 'include', field.name, true);\n\t\t\tif (isIncluded)\n\t\t\t\tresponse.include(resdata.type, resdata.id, linkedData);\n\t\t\tif (self._meta) resdata.meta = self._meta;\n\t\t\tif (self._links) resdata.links = self._links;\n\t\t\tdone(null, resdata);\n\t\t});\n\t});\n};\n\nRef.prototype.deserialize = function(field, transaction, resdata, object, done) {\n\tif (!_.isPlainObject(resdata)) return done(new InvalidFieldValue(field, resdata));\n\tvar target = Runtime.getResource(this._resourceName);\n\tif (resdata.type !== target.type || !ObjectId.isValid(resdata.id))\n\t\treturn done(new InvalidFieldValue(field, resdata));\n\t_.set(object, this._thisPath, new ObjectId(resdata.id));\n\tdone(null, object);\n};\n\nmodule.exports = Ref;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/accessors/Refs.js":"var inherits = require('util').inherits;\n\nvar _ = require('lodash');\nvar async = require('async');\nvar mongoose = require('mongoose');\nvar ObjectId = mongoose.Types.ObjectId;\n\nvar Runtime = require('../Runtime');\nvar Accessor = require('../Accessor');\nvar ResourceNotFound = require('../errors/ResourceNotFound');\nvar InvalidFieldValue = require('../errors/InvalidFieldValue');\n\nfunction Refs(resourceName, thisPath, opts) {\n\topts = opts || {};\n\tthis._resourceName = resourceName;\n\tthis._thisPath = thisPath;\n}\n\ninherits(Refs, Accessor);\n\nRefs.prototype.accessProperties = function(callback) {\n\tcallback(this._thisPath);\n};\n\nRefs.prototype.serialize = function(field, transaction, object, done) {\n\tvar self = this;\n\tvar ids = _.get(object, this._thisPath);\n\tif (_.isUndefined(ids)) return done(null);\n\tvar resource = Runtime.getResource(this._resourceName);\n\tvar response = transaction.response;\n\tvar resview = resource.view(transaction);\n\tvar isIncluded = transaction.transform(field.resource, 'include', field.name, true);\n\tasync.map(ids, function(id, next) {\n\t\tresview.findOne({ _id: id }, function(err, linked) {\n\t\t\tif (err) return next(err);\n\t\t\tif (!linked) return new ResourceNotFound(resource, { _id: id });\n\t\t\tresview.serialize(linked, function(err, linkedData) {\n\t\t\t\tif (err) return next(err);\n\t\t\t\tvar link = _.pick(linkedData, 'type', 'id');\n\t\t\t\tif (isIncluded)\n\t\t\t\t\tresponse.include(link.type, link.id, linkedData);\n\t\t\t\tnext(null, link);\n\t\t\t});\n\t\t});\n\t}, function(err, links) {\n\t\terr ? done(err) : done(null, links);\n\t});\n};\n\nRefs.prototype.deserialize = function(field, transaction, resdata, object, done) {\n\tif (!_.isArray(resdata))\n\t\treturn done(new InvalidFieldValue(field, resdata));\n\tvar self = this;\n\tvar links = [];\n\tvar target = Runtime.getResource(self._resourceName);\n\t_.set(object, this._thisPath, links);\n\t_.each(resdata, function(link, index) {\n\t\tif (link.type !== target.type || !ObjectId.isValid(link.id)) {\n\t\t\tvar opts = { meta: { index: index }};\n\t\t\tvar err = new InvalidFieldValue(field, resdata, opts);\n\t\t\treturn done(err);\n\t\t}\n\t\tvar id = new ObjectId(link.id);\n\t\tlinks.push(id);\n\t});\n\tdone(null, object);\n};\n\nmodule.exports = Refs;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/accessors/Property.js":"var inherits = require('util').inherits;\n\nvar _ = require('lodash');\n\nvar Accessor = require('../Accessor');\nvar InvalidFieldValue = require('../errors/InvalidFieldValue');\n\nfunction Property(path) {\n\tthis._path = path;\n}\n\ninherits(Property, Accessor);\n\nProperty.prototype.visitProperties = function(callback) {\n\tcallback(this._path);\n};\n\nProperty.prototype.serialize = function(field, transaction, object, done) {\n\tvar value = _.get(object, this._path);\n\tdone(null, value);\n};\n\nProperty.prototype.deserialize = function(field, transaction, resdata, object, done) {\n\t_.set(object, this._path, resdata);\n\tdone(null, object);\n};\n\nmodule.exports = Property;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/accessors/Template.js":"var inherits = require('util').inherits;\n\nvar _ = require('lodash');\n\nvar Accessor = require('../Accessor');\nvar InvalidFieldValue = require('../errors/InvalidFieldValue');\n\nfunction Template(format) {\n\tvar self = this;\n\tthis._strings = [];\n\tthis._values = [];\n\tvar chunks = format.split(/\\$\\{([^\\}]*)\\}/);\n\t_(chunks).chunk(2).forEach(function(stringValue) {\n\t\tself._strings.push(stringValue[0]);\n\t\tif (stringValue.length > 1)\n\t\t\tself._values.push(stringValue[1]);\n\t}).run();\n}\n\ninherits(Template, Accessor);\n\nTemplate.prototype.visitProperties = function(callback) {\n\t_.each(this._values, callback);\n};\n\nTemplate.prototype.serialize = function(field, transaction, object, done) {\n\tvar values = _.map(this._values, _.partial(_.get, object));\n\tif (_.any(values, _.isUndefined)) return done(null);\n\tvar result = _(this._strings).zip(values).flatten().value().join('');\n\tdone(null, result);\n};\n\nTemplate.prototype.deserialize = function(field, transaction, resdata, object, done) {\n\tif (!_.isString(resdata))\n\t\treturn done(new InvalidFieldValue(field, resdata));\n\tdone(null, object);\n};\n\nmodule.exports = Template;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/selectors.js":"var _ = require('lodash');\n\nfunction query(name) {\n\treturn function(req, parent) {\n\t\treturn req.query[name];\n\t};\n}\n\nfunction param(name) {\n\treturn function(req, parent) {\n\t\treturn req.params[name];\n\t};\n}\n\nfunction parent(name) {\n\treturn function(req, parent) {\n\t\treturn _.get(parent, name);\n\t};\n}\n\nexports.query = query;\nexports.param = param;\nexports.parent = parent;\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/errors/index.js":"module.exports = {\n\tApiError: require('./ApiError'),\n\tHttpError: require('./HttpError'),\n\tUnknownError: require('./UnknownError'),\n\tResourceNotFound: require('./ResourceNotFound'),\n\tInvalidFieldValue: require('./InvalidFieldValue'),\n};\n","/home/travis/build/npmtest/node-npmtest-jsonapify/node_modules/jsonapify/lib/errors/HttpError.js":"var util = require('util');\nvar http = require('http');\n\nvar _ = require('lodash');\n\nvar ApiError = require('./ApiError');\n\nfunction HttpError(status, opts) {\n\topts = opts || {};\n\topts.status = status;\n\topts.detail = http.STATUS_CODES[status];\n\tApiError.call(this, opts);\n}\n\nutil.inherits(HttpError, ApiError);\n\nmodule.exports = HttpError;\n"}